{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport placestore from 'mod_learningmap/placestore';\nimport svgjs from 'mod_learningmap/svg';\nimport shapes from './shapes';\n\n// Constants for updatePathDeclaration.\nconst targetPoints = {\n    firstPoint: 1,\n    secondPoint: 2,\n    bezierPoint: 3,\n};\n\nconst pathTypes = {\n    line: 1,\n    quadraticbezier: 2,\n};\n\nexport const init = () => {\n    // Load the needed template on startup for better execution speed.\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\n\n    // Size for the new circles. This will be overriden by placesize from the placestore.\n    var circleRadius = 10;\n\n    // Variable for storing the mouse offset\n    var offset;\n\n    // Variable for draggable element\n    var dragel;\n\n    // Variables for storing the paths that need update of the first or\n    // the second coordinates.\n    var pathsToUpdateFirstPoint, pathsToUpdateSecondPoint;\n\n    // Variables for handling the currently selected elements\n    var selectedElement = null,\n        firstPlace = null,\n        secondPlace = null,\n        lastTarget = null;\n\n    // Variable for storing the selected element for the activity selector\n    var elementForActivitySelector = null;\n\n    // Variables for simulating double click on touch devices, set when the\n    // corresponding events are handled\n    var touchstart = false;\n    var touchend = false;\n    // Counter for touchmove events\n    var touchmove = 0;\n\n    // DOM nodes for the editor\n    let mapdiv = document.getElementById('learningmap-editor-map');\n    let code = document.getElementById('id_svgcode');\n\n    // DOM nodes for the activity selector\n    let activitySetting = document.getElementById('learningmap-activity-setting');\n    let activitySelector = document.getElementById('learningmap-activity-selector');\n    let activityStarting = document.getElementById('learningmap-activity-starting');\n    let activityTarget = document.getElementById('learningmap-activity-target');\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\n\n    // Hide tree view as there is no preview file we can attach to\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\n    if (treeView) {\n        treeView.setAttribute('style', 'display: none;');\n    }\n\n    // Trigger click event on icon view to ensure that tree view is not active.\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\n    if (iconView) {\n        // Handle possible delay in form loading.\n        setTimeout(() => {\n            iconView.dispatchEvent(new Event('click'));\n        }, 1000);\n    }\n\n    // Attach listeners to the activity selector\n    if (activitySelector) {\n        // Show places that are not linked to an activity\n        activitySelector.addEventListener('change', function() {\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\n            if (activitySelector.value) {\n                let text = document.getElementById('text' + elementForActivitySelector);\n                if (text) {\n                    text.textContent = activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                let title = document.getElementById('title' + elementForActivitySelector);\n                if (title) {\n                    title.textContent =\n                        activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n            }\n            updateActivities();\n            updateCode();\n        });\n        // Add / remove a place to the starting places array\n        activityStarting.addEventListener('change', function() {\n            if (activityStarting.checked) {\n                placestore.addStartingPlace(elementForActivitySelector);\n            } else {\n                placestore.removeStartingPlace(elementForActivitySelector);\n            }\n            updateCode();\n        });\n        // Add / remove a place to the target places array\n        activityTarget.addEventListener('change', function() {\n            if (activityTarget.checked) {\n                placestore.addTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\n            } else {\n                placestore.removeTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\n            }\n            updateCode();\n        });\n    }\n\n    // Load placestore values from the hidden input field\n    let placestoreInput = document.getElementsByName('placestore')[0];\n    if (placestoreInput) {\n        placestore.loadJSON(placestoreInput.value);\n    }\n\n    updateColorPickers();\n\n    // Mark all activities in the placestore as \"used\".\n    updateActivities();\n\n    // Inititalize the menus.\n    initMenu('advanced-settings', [\n        {name: 'hidepaths', get: placestore.getHidePaths, set: placestore.setHidePaths},\n        {name: 'showall', get: placestore.getShowall, set: placestore.setShowall},\n        {name: 'slicemode', get: placestore.getSliceMode, set: placestore.setSliceMode},\n        {name: 'showwaygone', get: placestore.getShowWayGone, set: placestore.setShowWayGone},\n    ]);\n\n    initMenu('place-settings', [\n        {name: 'usecheckmark', get: placestore.getUseCheckmark, set: placestore.setUseCheckmark},\n        {name: 'hover', get: placestore.getHover, set: placestore.setHover},\n        {name: 'pulse', get: placestore.getPulse, set: placestore.setPulse},\n        {name: 'hidestroke', get: placestore.getHideStroke, set: placestore.setHideStroke},\n        {name: 'showtext', get: placestore.getShowText, set: placestore.setShowText, callback: fixPlaceLabels},\n        {name: 'placesize', get: placestore.getPlaceSize, set: placestore.setPlaceSize, callback: updatePlaceSize},\n        {name: 'placecolor', get: placestore.getPlaceColor, set: placestore.setPlaceColor},\n        {name: 'visitedcolor', get: placestore.getVisitedColor, set: placestore.setVisitedColor},\n        {name: 'strokecolor', get: placestore.getStrokeColor, set: placestore.setStrokeColor},\n        {name: 'textcolor', get: placestore.getTextColor, set: placestore.setTextColor},\n    ]);\n\n    // Get SVG code from the (hidden) textarea field\n    if (code && mapdiv) {\n        mapdiv.innerHTML = code.value;\n    }\n    // Reload background image to get the correct width and height values\n    refreshBackgroundImage();\n    registerBackgroundListener();\n    updateCode();\n\n    // Enable dragging of places\n    let svgel = document.getElementById('learningmap-svgmap-' + placestore.getMapid());\n    makeDraggable(svgel);\n    var mapsvg = svgjs().SVG('#learningmap-svgmap-' + placestore.getMapid());\n\n    // Refresh stylesheet values from placestore\n    updateCSS();\n\n    // Add listeners for clicking and context menu\n    if (mapdiv) {\n        mapdiv.addEventListener('dblclick', dblclickHandler);\n        mapdiv.addEventListener('click', clickHandler);\n\n        mapdiv.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            showContextMenu(e);\n        }, false);\n    }\n    /**\n     * Shows the context menu at the current mouse position\n     * @param {*} e\n     */\n    function showContextMenu(e) {\n        unselectAll();\n        hideOtherMenus();\n        // Check for the existence of the target (could have vanished since the event started).\n        if (activitySetting && document.getElementById(e.target.id) !== null) {\n            if (e.touches) {\n                e = e.touches[0];\n            }\n            if (e.target.classList.contains('learningmap-place')) {\n                let element = getSVGShape(e.target.id);\n                e.target.classList.add('learningmap-selected-activity-selector');\n                let activityId = placestore.getActivityId(e.target.id);\n                let scalingFactor = mapdiv.clientWidth / 800;\n                activitySetting.style.setProperty('--pos-x', element.cx() * scalingFactor + 'px');\n                activitySetting.style.setProperty('--pos-y', element.cy() * scalingFactor + 'px');\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\n                activitySetting.style.display = 'block';\n                document.getElementById('learningmap-activity-selector').value = activityId;\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\n                elementForActivitySelector = e.target.id;\n                updateActivities();\n            } else {\n                hideContextMenu();\n                hideOtherMenus();\n            }\n        }\n    }\n\n    /**\n     * Hides the context menu\n     */\n    function hideContextMenu() {\n        let e = document.getElementById(elementForActivitySelector);\n        if (e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        }\n        activitySetting.style.display = 'none';\n    }\n\n    let backgroundfileNode = document.getElementById('id_backgroundfile_fieldset');\n    if (backgroundfileNode) {\n        let observer = new MutationObserver(refreshBackgroundImage);\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n    }\n\n    /**\n     * Helper function for getting the right coordinates from the mouse\n     * @param {*} evt\n     * @returns {object}\n     */\n    function getMousePosition(evt) {\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return transformCoordinates(evt.clientX, evt.clientY);\n    }\n\n    /**\n     * Transforms client coordinates to SVG coordinates\n     * @param {number} x x coordinate to transform\n     * @param {number} y y coordinate to transform\n     * @returns {object} Object containing transformed x and y coordinate\n     */\n    function transformCoordinates(x, y) {\n        var CTM = dragel.getScreenCTM();\n        return {\n            x: (x - CTM.e) / CTM.a,\n            y: (y - CTM.f) / CTM.d\n        };\n    }\n\n    /**\n     * Returns the SVG shape with the given id or representing the\n     * given object.\n     * @param {*} element\n     * @returns\n     */\n    function getSVGShape(element) {\n        if (typeof element === 'object') {\n            return mapsvg.findOne('#' + element.id);\n        } else {\n            return mapsvg.findOne('#' + element);\n        }\n    }\n\n    /**\n     * Enables dragging on an DOM node\n     * @param {*} el\n     */\n    function makeDraggable(el) {\n        dragel = el;\n        if (el) {\n            el.addEventListener('mousedown', startDrag);\n            el.addEventListener('mousemove', drag);\n            el.addEventListener('mouseup', endDrag);\n            el.addEventListener('mouseleave', endDrag);\n            el.addEventListener('touchstart', startTouch);\n            el.addEventListener('touchmove', drag);\n            el.addEventListener('touchend', endTouch);\n            el.addEventListener('touchleave', endTouch);\n            el.addEventListener('touchcancel', endTouch);\n        }\n\n        /**\n         * Function called whenn dragging starts.\n         * @param {*} evt\n         */\n        function startDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            pathsToUpdateFirstPoint = [];\n            pathsToUpdateSecondPoint = [];\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                selectedElement = evt.target;\n                let svgel = getSVGShape(selectedElement);\n                offset = getMousePosition(evt);\n                offset.x -= svgel.cx();\n                offset.y -= svgel.cy();\n                // Get paths that need to be updated.\n                pathsToUpdateFirstPoint = placestore.getPathsWithFid(evt.target.id);\n                pathsToUpdateSecondPoint = placestore.getPathsWithSid(evt.target.id);\n            } else if (evt.target.nodeName == 'text') {\n                selectedElement = evt.target;\n                let svgel = getSVGShape(selectedElement);\n                let place = findPlaceForText(selectedElement.id);\n                offset = getMousePosition(evt);\n                offset.x -= svgel.attr('dx') + place.cx();\n                offset.y -= svgel.attr('dy') + place.cy();\n            } else if (evt.target.nodeName == 'path') {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                let pathPoint = transformCoordinates(evt.layerX, evt.layerY);\n                offset.x += pathPoint.x;\n                offset.y += pathPoint.y;\n            }\n        }\n\n        /**\n         * Function called during dragging. Continuously updates places center coordinates and the\n         * coordinates of the touching paths.\n         * @param {*} evt\n         */\n        function drag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            // Count touchmove events\n            touchmove++;\n            if (selectedElement) {\n                var coord = getMousePosition(evt);\n                let cx = coord.x - offset.x;\n                let cy = coord.y - offset.y;\n                if (selectedElement.classList.contains('learningmap-place')) {\n                    let placeel = mapsvg.findOne('#' + selectedElement.id);\n                    placeel.center(cx, cy);\n                    let textNode = mapsvg.findOne('#text' + selectedElement.id);\n                    if (textNode !== null) {\n                        textNode.amove(cx, cy);\n                    }\n                    pathsToUpdateFirstPoint.forEach(function(path) {\n                        let pathElement = getSVGShape(path);\n                        if (pathElement !== null) {\n                            if (pathElement.type == 'path') {\n                                pathElement.attr(\n                                    {'d': updatePathDeclaration(pathElement.attr('d'), cx, cy, targetPoints.firstPoint)}\n                                );\n                            } else {\n                                pathElement.attr({'x1': cx, 'y1': cy});\n                            }\n                        }\n                    });\n\n                    pathsToUpdateSecondPoint.forEach(function(path) {\n                        let pathElement = getSVGShape(path);\n                        if (pathElement !== null) {\n                            if (pathElement.type == 'path') {\n                                pathElement.attr(\n                                    {'d': updatePathDeclaration(pathElement.attr('d'), cx, cy, targetPoints.secondPoint)}\n                                );\n                            } else {\n                                pathElement.attr({'x2': cx, 'y2': cy});\n                            }\n                        }\n                    });\n                } else if (selectedElement.nodeName == 'text') {\n                    let textel = getSVGShape(selectedElement);\n                    let place = findPlaceForText(selectedElement.id);\n                    // Calculate the delta from the current mouse position to the corresponding place.\n                    // coord: current mouse position\n                    // offset: delta from the mouse position to the coordinates of the text node\n                    let dx = cx - place.cx();\n                    let dy = cy - place.cy();\n                    // We cannot use the dx() and dy() functions of the text node, because they are not\n                    // setting the attributes dx and dy.\n                    textel.attr({dx: dx, dy: dy});\n                } else if (selectedElement.nodeName == 'path') {\n                    selectedElement.setAttribute(\n                        'd',\n                        updatePathDeclaration(selectedElement.getAttribute('d'), coord.x, coord.y, targetPoints.bezierPoint)\n                    );\n                }\n            }\n        }\n\n        /**\n         * Function called when dragging ends.\n         * @param {*} evt\n         */\n        function endDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            selectedElement = null;\n            unselectAll();\n            updateCode();\n        }\n\n        /**\n         * Function called when touchstart event occurs.\n         * @param {*} evt\n         */\n        function startTouch(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (\n                evt.target.classList.contains('learningmap-draggable') ||\n                evt.target.nodeName == 'text' ||\n                evt.target.nodeName == 'path'\n            ) {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchmove = 0;\n                    touchend = false;\n                    setTimeout(\n                        (evt) => {\n                            if (touchmove < 3 && !touchend) {\n                                if (evt.touches) {\n                                    evt = evt.touches[0];\n                                }\n                                showContextMenu(evt);\n                            }\n                        },\n                        2000,\n                        evt\n                    );\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n                startDrag(evt);\n            } else {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchend = false;\n                    touchmove = 0;\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n            }\n        }\n\n        /**\n         * Function called when touchend, touchleave or touchcancel event occurs.\n         * @param {*} evt\n         */\n        function endTouch(evt) {\n            selectedElement = null;\n            touchend = true;\n            // If there was only a small move (<3 move events), this also counts as a click.\n            if (touchmove < 3 && touchstart) {\n                clickHandler(evt);\n            } else {\n                endDrag(evt);\n            }\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n        }\n\n        /**\n         * Updates the path declaration of lines and quadratic bezier curves setting one of the points.\n         * @param {string} oldDefinition SVG path definition string\n         * @param {number} targetX x coordinate of the point to set\n         * @param {number} targetY y coordinate of the point to set\n         * @param {number} targetP Which point to change (you can use the targetPoints constants here)\n         * @returns {string} Updated SVG path definition\n         */\n        function updatePathDeclaration(oldDefinition, targetX, targetY, targetP = targetPoints.firstPoint) {\n            let parts = oldDefinition.split(' ');\n            let fromX = 0;\n            let fromY = 0;\n            let toX = 0;\n            let toY = 0;\n            let bezierX = 0;\n            let bezierY = 0;\n            let pathType = pathTypes.line;\n\n            // The d attribute of an SVG path in a learning map can have two different formats (in this version):\n            // \"M x1 y1 L x2 y2\"        Line from x1, y1 to x2, y2\n            // \"M x1 y2 Q x3 y3 x2 y2\"  Quadratic bezier curve inside the triangle defined by x1, y1, x2, y2 and x3, y3.\n            for (let i = 0; i < parts.length; i++) {\n                // Every path contains the first point in that way.\n                if (parts[i] == 'M') {\n                    fromX = parseInt(parts[i + 1]);\n                    fromY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a direct line, so there are only two points in total.\n                if (parts[i] == 'L') {\n                    toX = parseInt(parts[i + 1]);\n                    toY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a bezier curve, there are three points in total.\n                if (parts[i] == 'Q') {\n                    bezierX = parseInt(parts[i + 1]);\n                    bezierY = parseInt(parts[i + 2]);\n                    toX = parseInt(parts[i + 3]);\n                    toY = parseInt(parts[i + 4]);\n                    i += 4;\n                    pathType = pathTypes.quadraticbezier;\n                }\n            }\n\n            switch (targetP) {\n                case targetPoints.firstPoint:\n                    fromX = targetX;\n                    fromY = targetY;\n                    break;\n                case targetPoints.secondPoint:\n                    toX = targetX;\n                    toY = targetY;\n                    break;\n                case targetPoints.bezierPoint:\n                    // Calculate the third triangle point for the bezier curve.\n                    bezierX = targetX * 2 - (fromX + toX) * 0.5;\n                    bezierY = targetY * 2 - (fromY + toY) * 0.5;\n                    pathType = pathTypes.quadraticbezier;\n                    break;\n            }\n\n            if (pathType == pathTypes.quadraticbezier) {\n                return 'M ' + fromX + ' ' + fromY + ' Q ' + bezierX + ' ' + bezierY + ', ' + toX + ' ' + toY;\n            } else {\n                return 'M ' + fromX + ' ' + fromY + ' L ' + toX + ' ' + toY;\n            }\n        }\n    }\n\n    /**\n     * Updates the form fields for the SVG code and the placestore from the editor.\n     */\n    function updateCode() {\n        if (code && mapdiv) {\n            code.innerHTML = mapdiv.innerHTML;\n        }\n        if (placestoreInput) {\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\n        }\n    }\n\n    /**\n     * Handles double clicks on the map\n     * @param {*} event\n     */\n    function dblclickHandler(event) {\n        hideContextMenu();\n        hideOtherMenus();\n        unselectAll();\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\n            event.target.classList.contains('learningmap-background-image')) {\n            addPlace(event);\n        } else if (event.target.classList.contains('learningmap-place')) {\n            if (lastTarget == event.target.id) {\n                lastTarget = null;\n                clickHandler(event);\n            } else {\n                removePlace(event);\n            }\n        } else if (event.target.classList.contains('learningmap-path')) {\n            removePath(event.target.id);\n        }\n        updateCode();\n    }\n\n    /**\n     * Returns an empty title tag with the given id.\n     * @param {*} id id for the title\n     * @returns {any}\n     */\n    function title(id) {\n        return mapsvg.element('title').id(id);\n    }\n\n    /**\n     * Returns an text tag with the given id.\n     * @param {*} id id for the text\n     * @param {*} content content of the tag\n     * @param {*} x x coordinate of the text\n     * @param {*} y y coordinate of the text\n     * @returns {any}\n     */\n     function text(id, content, x, y) {\n        return mapsvg.text().attr({dx: circleRadius * 1.5, dy: circleRadius * 1.5}).plain(content).move(x, y).id(id);\n    }\n\n    /**\n     * Returns a path between two points.\n     * @param {*} x1 x coordinate of the first point\n     * @param {*} y1 y coordinate of the first point\n     * @param {*} x2 x coordinate of the second point\n     * @param {*} y2 y coordinate of the second point\n     * @param {*} classes CSS classes to set\n     * @param {*} id id of the path\n     * @returns {any}\n     */\n     function path(x1, y1, x2, y2, classes, id) {\n        return mapsvg.path('M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2).attr({'class': classes}).id(id);\n    }\n\n    /**\n     * Returns a link around a given child element. This function also adds a title element next\n     * to the child for accessibility.\n     * @param {*} child child item to set the link on\n     * @param {*} id id of the link\n     * @param {*} title title of the link\n     * @returns {any}\n     */\n    function link(child, id, title = null) {\n        return mapsvg.link('').id(id).add(child).add(title);\n    }\n\n    /**\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\n     * and adding titles (for accessibility).\n     * @param {*} event event causing the command\n     */\n    function addPlace(event) {\n        let placesgroup = mapsvg.findOne('.learningmap-places-group');\n        let textgroup = mapsvg.findOne('.learningmap-text-group');\n        let placeId = 'p' + placestore.getId();\n        let linkId = 'a' + placestore.getId();\n        var CTM = event.target.getScreenCTM();\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        let cx = (event.clientX - CTM.e) / CTM.a;\n        let cy = (event.clientY - CTM.f) / CTM.d;\n        let svglink = link(\n            shapes.circle(mapsvg, cx, cy, circleRadius, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\n            linkId,\n            title('title' + placeId)\n        );\n        svglink.addTo(placesgroup);\n        let textNode = text('text' + placeId, '', cx, cy);\n        textNode.addTo(textgroup);\n        placestore.addPlace(placeId, linkId, null, svglink.bbox());\n    }\n\n    /**\n     * Handles single clicks on the background image.\n     * @param {*} event click event\n     * @returns {void}\n     */\n    function clickHandler(event) {\n        event.preventDefault();\n        hideContextMenu();\n        hideOtherMenus();\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\n            if (firstPlace === null) {\n                firstPlace = event.target.id;\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\n            } else {\n                secondPlace = event.target.id;\n                let fid = parseInt(firstPlace.replace('p', ''));\n                let sid = parseInt(secondPlace.replace('p', ''));\n                if (sid == fid) {\n                    return;\n                }\n                if (sid < fid) {\n                    let z = sid;\n                    sid = fid;\n                    fid = z;\n                }\n                addPath(fid, sid);\n                let first = document.getElementById(firstPlace);\n                if (first) {\n                    first.classList.remove('learningmap-selected');\n                }\n                firstPlace = null;\n                lastTarget = secondPlace;\n                secondPlace = null;\n            }\n        } else {\n            unselectAll();\n            firstPlace = null;\n        }\n    }\n    /**\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\n     * from all nodes\n     */\n    function unselectAll() {\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\n            e.classList.remove('learningmap-selected');\n        });\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        });\n    }\n\n    /**\n     * Adds a path between two places.\n     * @param {number} fid id of the first place (meant to be the smaller one)\n     * @param {number} sid id of the second place (meant to be the bigger one)\n     */\n    function addPath(fid, sid) {\n        let pid = 'p' + fid + '_' + sid;\n        if (document.getElementById(pid) === null) {\n            let pathsgroup = mapsvg.findOne('.learningmap-pathsgroup');\n            let first = mapsvg.findOne('#p' + fid);\n            let second = mapsvg.findOne('#p' + sid);\n            if (pathsgroup && first && second) {\n                let svgpath = path(\n                    first.cx(),\n                    first.cy(),\n                    second.cx(),\n                    second.cy(),\n                    'learningmap-path',\n                    pid\n                );\n                svgpath.addTo(pathsgroup);\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\n            }\n        }\n    }\n\n    /**\n     * Removes a place from the SVG and the placestore. This function also removes all\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\n     * place.\n     * @param {any} event event causing the remove order\n     */\n    function removePlace(event) {\n        let place = getSVGShape(event.target.id);\n        removePathsTouchingPlace(event.target.id);\n        placestore.removePlace(event.target.id);\n        place.parent().remove();\n        let textNode = document.getElementById('text' + event.target.id);\n        if (textNode) {\n            textNode.remove();\n        }\n\n        updateCode();\n    }\n\n    /**\n     * Removes all paths touching a certain place\n     * @param {number} id id of the place\n     */\n    function removePathsTouchingPlace(id) {\n        placestore.getTouchingPaths(id).forEach(\n            function(e) {\n                removePath(e.id);\n            }\n        );\n    }\n\n    /**\n     * Removes a path from the SVG and from the placestore\n     * @param {number} id id of the path\n     */\n    function removePath(id) {\n        let path = getSVGShape(id);\n        if (path !== null) {\n            path.remove();\n            placestore.removePath(id);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let previewimage = document.getElementsByClassName('realpreview');\n        if (previewimage.length > 0) {\n            let background = document.getElementById('learningmap-background-image');\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            background.setAttribute('xlink:href', backgroundurl);\n        }\n    }\n\n    /**\n     * Adds an eventListener to the background image for watching file changes and updating\n     * height and width of the image.\n     */\n    function registerBackgroundListener() {\n        let background = document.getElementById('learningmap-background-image');\n        if (background) {\n            background.addEventListener('load', function() {\n                background.removeAttribute('height');\n                let height = parseInt(background.getBBox().height);\n                let width = background.getBBox().width;\n                placestore.setBackgroundDimensions(width, height);\n                svgel.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\n                background.setAttribute('width', width);\n                background.setAttribute('height', height);\n                updateCode();\n            });\n        }\n    }\n\n    /**\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\n     * Calls updateCode() when completed.\n     */\n    function updateCSS() {\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\n                updateCode();\n                return true;\n            })\n            .catch(ex => displayException(ex));\n        let placestoretemp = placestore.getPlacestore();\n        placestoretemp.mapid = 'preview';\n        placestoretemp.cssid = 'learningmap-preview-svgstyle';\n        placestoretemp.editmode = false;\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestoretemp)\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-preview-svgstyle', html, js);\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    }\n\n    /**\n     * Updates the activity selector to highlight the activities already used\n     * and to show the alert for hidden activities.\n     */\n    function updateActivities() {\n        let activities = placestore.getAllActivities();\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        activityHiddenWarning.setAttribute('hidden', '');\n        options.forEach(function(n) {\n            if (activities.includes(n.value)) {\n                n.classList.add('learningmap-used-activity');\n                if (n.selected) {\n                    if (n.getAttribute('data-activity-hidden') == true) {\n                        activityHiddenWarning.removeAttribute('hidden');\n                    }\n                }\n            } else {\n                n.classList.remove('learningmap-used-activity');\n            }\n        });\n    }\n\n    /**\n     * Adds missing text nodes\n     */\n    function fixPlaceLabels() {\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        let places = placestore.getPlaces();\n        let textgroup = mapsvg.findOne('.learningmap-text-group');\n        for (const place of places) {\n            if (document.getElementById('text' + place.id) === null) {\n                let content = '';\n                for (const option of options) {\n                    if (option.value == place.linkedActivity) {\n                        content = option.textContent;\n                        break;\n                    }\n                }\n                let placeNode = mapsvg.findOne('#' + place.id);\n                let textNode = text('text' + place.id, content, placeNode.cx(), placeNode.cy());\n                textNode.addTo(textgroup);\n            } else {\n                let textNode = mapsvg.findOne('#text' + place.id);\n                textNode.addTo(textgroup);\n            }\n        }\n    }\n\n    /**\n     * Updates the size of the places.\n     */\n    function updatePlaceSize() {\n        circleRadius = placestore.getPlaceSize();\n        let places = placestore.getPlaces();\n        for (const place of places) {\n            let placeel = getSVGShape(place.id);\n            if (placeel) {\n                let cx = placeel.cx();\n                let cy = placeel.cy();\n                if (placeel.type != 'text') {\n                    placeel.width(circleRadius * 2).height(circleRadius * 2);\n                } else {\n                    placeel.font({size: circleRadius});\n                }\n                placeel.center(cx, cy);\n            }\n        }\n    }\n\n    /**\n     * Initializes a menu with the given features.\n     * @param {*} name Name of the menu\n     * @param {*} features Array with features to add to the menu\n     */\n    function initMenu(name, features) {\n        let icon = document.getElementById('learningmap-' + name + '-icon');\n        if (icon) {\n            icon.addEventListener('click', function() {\n                if (menuIsHidden(name)) {\n                    showMenu(name);\n                } else {\n                    hideMenu(name);\n                }\n            });\n            let close = document.getElementById('learningmap-' + name + '-close');\n            if (close) {\n                close.addEventListener('click', function() {\n                    hideMenu(name);\n                });\n            }\n        }\n        features.forEach(function(feature) {\n            menuItemLogic(name, feature.name, feature.get, feature.set, feature.callback, feature.second);\n        });\n    }\n\n    /**\n     * Returns whether the menu is hidden or not.\n     * @param {*} name Name of the menu\n     * @returns {boolean}\n     */\n    function menuIsHidden(name) {\n        let menu = document.getElementById('learningmap-' + name + '-menu');\n        if (menu) {\n            return menu.getAttribute('hidden') !== null;\n        }\n        return false;\n    }\n\n    /**\n     * Hides the menu with the given name.\n     * @param {*} name Name of the menu\n     */\n    function hideMenu(name) {\n        let menu = document.getElementById('learningmap-' + name + '-menu');\n        if (menu) {\n            menu.setAttribute('hidden', '');\n        }\n    }\n\n    /**\n     * Hides all menus except the one with the given name.\n     * @param {*} name Name of the menu not to hide\n     */\n    function hideOtherMenus(name = '') {\n        let otherMenus = document.querySelectorAll('.learningmap-menu');\n        otherMenus.forEach(function(menu) {\n            if (menu.id != 'learningmap-' + name + '-menu') {\n                menu.setAttribute('hidden', '');\n            }\n        });\n    }\n\n    /**\n     * Shows the menu with the given name.\n     * @param {*} name Name of the menu\n     */\n    function showMenu(name) {\n        let menu = document.getElementById('learningmap-' + name + '-menu');\n        if (menu) {\n            menu.removeAttribute('hidden');\n            updateColorPickers();\n            hideOtherMenus(name);\n            hideContextMenu();\n        }\n    }\n\n    /**\n     * Adds the event listener to menu items\n     * @param {*} type Type of the item (describes the menu where it is located, e.g. advanced-settings, place-settings, ...)\n     * @param {*} name Name of the item\n     * @param {*} getCall Method of placestore to call to read value\n     * @param {*} setCall Method of placestore to call to save value\n     * @param {*} callback Additional callback after value is saved\n     */\n    function menuItemLogic(type, name, getCall, setCall, callback = null) {\n        let menuItem = document.getElementById('learningmap-' + type + '-' + name);\n        if (menuItem) {\n            switch (menuItem.attributes.type.nodeValue) {\n                case 'checkbox':\n                    menuItem.checked = getCall.call(placestore);\n                    menuItem.addEventListener('input', function() {\n                        setCall.call(placestore, menuItem.checked);\n                        if (callback !== null) {\n                            callback();\n                        }\n                        updateCSS();\n                    });\n                break;\n                default:\n                    menuItem.value = getCall.call(placestore);\n                    menuItem.addEventListener('input', function() {\n                        setCall.call(placestore, menuItem.value);\n                        if (callback !== null) {\n                            callback();\n                        }\n                        updateCSS();\n                    });\n            }\n\n        }\n    }\n\n    /**\n     * Updates the color pickers to the current values from the placestore.\n     */\n    function updateColorPickers() {\n        let colorPickers = document.querySelectorAll('[id^=\"learningmap-place-settings-jscolor-\"]');\n        colorPickers.forEach(function(colorpicker) {\n            if (colorpicker.jscolor) {\n                colorpicker.jscolor.fromString(placestore[colorpicker.id.split('jscolor-')[1]]);\n            }\n        });\n    }\n\n    /**\n     * Returns the place that belongs to the given text id.\n     * @param {*} textId\n     * @returns\n     */\n    function findPlaceForText(textId) {\n        let placename = textId.replace('text', '');\n        return mapsvg.findOne('#' + placename);\n    }\n};\n"],"names":["targetPoints","pathTypes","prefetchTemplates","offset","dragel","pathsToUpdateFirstPoint","pathsToUpdateSecondPoint","circleRadius","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","activitySetting","activitySelector","activityStarting","activityTarget","activityHiddenWarning","treeView","querySelector","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","setActivityId","value","text","textContent","title","classList","remove","add","updateActivities","updateCode","checked","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","placestoreInput","getElementsByName","loadJSON","updateColorPickers","initMenu","name","get","placestore","getHidePaths","set","setHidePaths","getShowall","setShowall","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone","getUseCheckmark","setUseCheckmark","getHover","setHover","getPulse","setPulse","getHideStroke","setHideStroke","getShowText","setShowText","callback","options","Array","from","getElementsByTagName","places","getPlaces","textgroup","mapsvg","findOne","place","id","content","option","linkedActivity","placeNode","cx","cy","addTo","getPlaceSize","setPlaceSize","placeel","getSVGShape","type","width","height","font","size","center","getPlaceColor","setPlaceColor","getVisitedColor","setVisitedColor","getStrokeColor","setStrokeColor","getTextColor","setTextColor","innerHTML","refreshBackgroundImage","background","removeAttribute","parseInt","getBBox","setBackgroundDimensions","svgel","registerBackgroundListener","getMapid","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","target","contains","nodeName","dblclickHandler","touches","showContextMenu","endTouch","getMousePosition","x","y","getPathsWithFid","getPathsWithSid","findPlaceForText","attr","pathPoint","transformCoordinates","layerX","layerY","coord","textNode","amove","forEach","path","pathElement","updatePathDeclaration","textel","dx","dy","getAttribute","unselectAll","clickHandler","oldDefinition","targetX","targetY","targetP","parts","split","fromX","fromY","toX","toY","bezierX","bezierY","pathType","i","length","makeDraggable","SVG","e","hideOtherMenus","element","activityId","getActivityId","scalingFactor","clientWidth","style","setProperty","clientHeight","display","isStartingPlace","isTargetPlace","hideContextMenu","updateCSS","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","clientX","clientY","CTM","getScreenCTM","a","f","d","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","svglink","child","link","shapes","circle","addPlace","bbox","getTouchingPaths","removePath","removePlace","parent","plain","move","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","classes","addPath","getElementsByClassName","previewimage","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","placestoretemp","mapid","cssid","editmode","_ref2","activities","getAllActivities","n","selected","features","icon","menu","menuIsHidden","hideMenu","showMenu","close","feature","getCall","setCall","menuItem","nodeValue","call","menuItemLogic","otherMenus","querySelectorAll","colorpicker","jscolor","fromString","textId","placename"],"mappings":"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"}